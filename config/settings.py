"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env at project root (if present)
env_path = BASE_DIR / ".env"
if env_path.exists():
    load_dotenv(env_path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY: prefer environment variable, fall back to existing insecure default
SECRET_KEY = os.getenv(
    "SECRET_KEY",
    "django-insecure-zzd9dehy49cbbvm$5%ko$nq9)q3bax7lq#fx&0br)(&!lskp3b",
)

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG and allowed hosts
DEBUG = os.getenv("DEBUG", "True").lower() in ("1", "true", "yes")

ALLOWED_HOSTS = os.getenv(
    "ALLOWED_HOSTS", "0.0.0.0,localhost,127.0.0.1,.localhost,admin.localhost"
).split(",")
# Note: .localhost allows wildcard subdomains like demo.localhost, demo123.localhost, admin.localhost, etc.


# Application definition

INSTALLED_APPS = [  # temporary list before SHARED_APPS composition (kept for clarity)
    "django_tenants",
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "manager.middleware.AdminSubdomainMiddleware",  # Must be first! Handles admin subdomain
    "config.tenant_middleware.CustomTenantMiddleware",  # Custom tenant resolution (respects skip_tenant_check)
    "accounts.middleware.StrictTenantMiddleware",  # Enforce strict domain checking
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"


DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)

SHARED_APPS = (
    "django_tenants",
    "accounts",  # Client/Domain models - tenant metadata
    "manager",  # SuperAdmin panel
    "tenant_users",  # User model (will be in all schemas but that's okay for this architecture)
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.admin",
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_spectacular",
)

TENANT_APPS = ("inventory",)

INSTALLED_APPS = list(SHARED_APPS) + list(TENANT_APPS)

# AUTH_USER_MODEL for both admin panel and tenant operations
# Note: Users will exist in all schemas (shared data model)
# For isolation, you need schema-based access control in middleware/permissions
AUTH_USER_MODEL = "tenant_users.User"

TENANT_MODEL = "accounts.Client"
TENANT_DOMAIN_MODEL = "accounts.Domain"

# Public schema settings (for non-tenant specific data)
PUBLIC_SCHEMA_NAME = "public"
PUBLIC_SCHEMA_URLCONF = "config.urls"  # URLs available on the public schema

# Strict domain checking - reject requests to non-existent domains
SHOW_PUBLIC_IF_NO_TENANT_FOUND = False  # Set to True if you want a fallback public site

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django_tenants.postgresql_backend"),
        "NAME": os.getenv("DB_NAME", "inventory_db"),
        "USER": os.getenv("DB_USER", "postgres"),
        "PASSWORD": os.getenv("DB_PASSWORD", "12345678"),
        "HOST": os.getenv("DB_HOST", "db"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = [
    BASE_DIR / "static",
]


# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user model (moved to tenant_users app for proper isolation)
# AUTH_USER_MODEL is already set above with TENANT_APPS

# Authentication URLs
LOGIN_URL = "/auth/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/auth/login/"

# Authentication backends
AUTHENTICATION_BACKENDS = [
    "accounts.authentication.TenantAwareAuthBackend",  # Custom tenant-aware auth only
]

# DRF / JWT configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        seconds=int(os.getenv("SIMPLE_JWT_ACCESS_TOKEN_LIFETIME", 3600))
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        seconds=int(os.getenv("SIMPLE_JWT_REFRESH_TOKEN_LIFETIME", 86400))
    ),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# drf-spectacular OpenAPI settings
SPECTACULAR_SETTINGS = {
    "TITLE": "Multi-Tenant SaaS POS API",
    "DESCRIPTION": "Comprehensive multi-tenant POS system with inventory management, subscriptions, and billing.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": r"/api",
    "COMPONENT_SPLIT_REQUEST": True,
    "SORT_OPERATIONS": True,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "displayRequestDuration": True,
    },
    "TAGS": [
        {"name": "auth", "description": "Authentication endpoints"},
        {"name": "users", "description": "User management and roles"},
        {"name": "payments", "description": "Payment processing and history"},
        {"name": "suppliers", "description": "Supplier management"},
        {"name": "categories", "description": "Product categories"},
        {"name": "products", "description": "Products & splitting"},
        {"name": "warehouses", "description": "Warehouse CRUD"},
        {"name": "stocks", "description": "Current stock levels"},
        {
            "name": "stock-movements",
            "description": "Inbound / Outbound / Transfer / Loss",
        },
        {"name": "customers", "description": "Customer management"},
        {"name": "vehicles", "description": "Vehicle management"},
        {"name": "service-orders", "description": "Service orders"},
        {"name": "expenses", "description": "Expense tracking"},
        {"name": "sales", "description": "Sales and POS operations"},
        {"name": "reports", "description": "Reporting and analytics"},
    ],
}


import socket

IS_ADMIN_DOMAIN = socket.gethostname().startswith("admin")
